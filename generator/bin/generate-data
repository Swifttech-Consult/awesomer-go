#!/usr/bin/env node

const settings = require('../settings');
const program = require('commander');
const { App } = require('../app');
const { OUTPUT_FORMATS } = require('../lib/awesomer_go_generator');

async function main() {
	program
		.description('Generate awesomer-go data as JSON. Can print it out or write into a file.')
		.option(
			'-f, --format <format>',
			`How to format output. "${OUTPUT_FORMATS.json}" (the default) or "${OUTPUT_FORMATS.jsonp}"`
		)
		.option(
			'--fallback <path>',
			`Optional file with fallback data to be used if some of the repository requests fail. Can be in any of the formats supported by --format flag`
		)
		.option(
			'-p, --project <filter>',
			'Only generate data for given project title. Mostly useful in testing.'
		)
		.option('-w, --write <path>', 'Write generated output to given file.')
		.option('-q, --quiet', 'No logging, only output. Useful if you want to pipe stdout somewhere.');

	program.parse(process.argv);

	if (program.quiet) {
		settings.logLevel = 'silent';
	}

	const app = new App(settings);
	await app.initialize();

	const format = program.format || OUTPUT_FORMATS.json;

	if (program.write) {
		await app.awesomerGoGenerator.generateIntoAFile(
			program.write,
			format,
			program.fallback,
			program.project
		);
	} else {
		console.log(
			await app.awesomerGoGenerator.generateFormatted(format, program.fallback, program.project)
		);
	}
}

Promise.resolve()
	.then(() => main())
	.catch(err => {
		console.error(err);
		process.exit(1);
	});
